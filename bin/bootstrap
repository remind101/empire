#!/bin/bash

echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
echo '!! This script produces an insecure dev environment and is           !!'
echo '!! not meant to be ran in production. As well it is exposed to the   !!'
echo '!! internet and as such should not be left running without further   !!'
echo '!! locking down of the security groups.                              !!'
echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
echo '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'

read -p "Do you want to continue? (y/N) " SECCHECK

SECCHECK=$(echo $SECCHECK | tr '[:upper:]' '[:lower:]')

if [ "$SECCHECK" != "y" ]
then
    echo "Aborting."
    exit
fi

set -e
set -o pipefail

# Check for dependent commands
check_dep() {
  command -v $1 >/dev/null 2>&1 || { printf >&2 "%s is required but not installed. Aborting.\n" $1; exit 1; }
}

# Returns the value of a named output from the created stack.
output() {
  aws cloudformation describe-stacks --stack-name $STACK --query 'Stacks[0].Outputs[*].[OutputKey,OutputValue]' --output text | grep $1 | cut -f 2
}

# only works in us-east-1 for now
export AWS_DEFAULT_REGION=us-east-1

check_dep "aws"

# This variable will be used as the cloudformation stack name and the associated
# ECS cluster.
SUFFIX=""
[ -x /sbin/md5 ] && SUFFIX=$(date | /sbin/md5 | head -c 8)
[ -x /usr/bin/md5sum ] && SUFFIX=$(date | /usr/bin/md5sum | head -c 8)
if [ -z ${SUFFIX} ]
then
    echo "No /sbin/md5 or /usr/sbin/md5sum found on system, switching to default name"
    SUFFIX=my-stack
fi

DEFAULT_STACK="empire-${SUFFIX}"
STACK="${STACK:-${DEFAULT_STACK}}"

# If no zones are set in the environment, query them
if [ -z "$ZONES" ]
then
    ZONES=$(aws ec2 describe-availability-zones --query 'AvailabilityZones[*].ZoneName' --output text | awk '{print $1, $2}')
fi

# have to escape commas in parameters for aws cli
SAFEZONES=$(echo $ZONES | sed -e 's/ /\\,/g')

read -p "AWS SSH KeyName: " keyname
read -p "Do you have a docker account & want to use it for private repo access? [y/N] " private_docker

private_docker=$(echo $private_docker | tr '[a-z]' '[A-Z'])
DEFAULT_DOCKER_REGISTRY="https://index.docker.io/v1/"

AWSCMD="aws cloudformation create-stack --stack-name "$STACK" --template-body file://$PWD/docs/cloudformation.json --capabilities CAPABILITY_IAM"


PARAMETERS="ParameterKey=DesiredCapacity,ParameterValue=5 ParameterKey=DesiredCapacity,ParameterValue=10 ParameterKey=AvailabilityZones,ParameterValue=\"$SAFEZONES\" ParameterKey=KeyName,ParameterValue=\"$keyname\" ParameterKey=LaunchEmpire,ParameterValue=false"

if [ "$private_docker" == "Y" ]
then
  read -p "Docker registry ($DEFAULT_DOCKER_REGISTRY): " docker_registry
  [ -z "${docker_registry}" ] && docker_registry=$DEFAULT_DOCKER_REGISTRY

  read -p "Docker user: " docker_user
  read -s -p "Docker pass: " docker_pass
  printf "\n"
  read -p "Docker email: " docker_email


  PARAMETERS="${PARAMETERS} ParameterKey=DockerRegistry,ParameterValue='$docker_registry' ParameterKey=DockerUser,ParameterValue='$docker_user' ParameterKey=DockerPass,ParameterValue='$docker_pass' ParameterKey=DockerEmail,ParameterValue='$docker_email'"
fi

AWSCMD="${AWSCMD} --parameters ${PARAMETERS} > /dev/null"

echo "==> Launching empire in AZs: $ZONES, Cloudformation Stack $STACK"

eval $AWSCMD

printf "==> Waiting for stack to complete\n"
stack_status=""
while [ "$stack_status" != "CREATE_COMPLETE" ]; do
  sleep 1
  printf '\033[2K\r'
  printf "==> Status: %s" $stack_status
  stack_status=$(aws cloudformation describe-stacks --stack-name "$STACK" --output text --query 'Stacks[0].StackStatus' 2>/dev/null)
  if [ "$stack_status" == "ROLLBACK_COMPLETE" ]; then
    printf "\nStack creation failed, check AWS cloudformation console for details.\n"
    exit 1
  fi
done

echo
echo "==> Stack $STACK complete."

if [ ! -e ~/.dockercfg ]; then
  echo "==> ~/.dockercfg not found. Creating."
  echo '{}' > ~/.dockercfg
fi

echo "==> Dumping stack info into .env"
echo "AWS_REGION=$AWS_DEFAULT_REGION" > .env
echo "AWS_ACCESS_KEY_ID=$(output AccessKeyId)" >> .env
echo "AWS_SECRET_ACCESS_KEY=$(output SecretAccessKey)" >> .env
echo "EMPIRE_S3_TEMPLATE_BUCKET=$(output TemplateBucket)" >> .env
echo "EMPIRE_ELB_VPC_ID=$(output VPC)" >> .env
echo "EMPIRE_ELB_SG_PRIVATE=$(output InternalELBSG)" >> .env
echo "EMPIRE_ELB_SG_PUBLIC=$(output ExternalELBSG)" >> .env
echo "EMPIRE_ECS_CLUSTER=$(output Cluster)" >> .env
echo "EMPIRE_ECS_SERVICE_ROLE=$(output ServiceRole)" >> .env
echo "EMPIRE_EC2_SUBNETS_PRIVATE=$(output Subnets)" >> .env
echo "EMPIRE_EC2_SUBNETS_PUBLIC=$(output Subnets)" >> .env
echo "EMPIRE_ROUTE53_INTERNAL_ZONE_ID=$(output InternalZoneID)" >> .env
echo "EMPIRE_CUSTOM_RESOURCES_TOPIC=$(output CustomResourcesTopic)" >> .env
echo "EMPIRE_CUSTOM_RESOURCES_QUEUE=$(output CustomResourcesQueue)" >> .env
