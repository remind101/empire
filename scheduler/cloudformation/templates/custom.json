{
  "Conditions": {
    "DNSCondition": {
      "Fn::Equals": [
        {
          "Ref": "DNS"
        },
        "true"
      ]
    }
  },
  "Outputs": {
    "EmpireVersion": {
      "Value": "x.x.x"
    },
    "Release": {
      "Value": "v1"
    },
    "Services": {
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Fn::Join": [
                "=",
                [
                  "web",
                  {
                    "Ref": "webService"
                  }
                ]
              ]
            }
          ]
        ]
      }
    }
  },
  "Parameters": {
    "DNS": {
      "Type": "String",
      "Description": "When set to `true`, CNAME's will be altered",
      "Default": "true"
    },
    "RestartKey": {
      "Type": "String"
    },
    "vacuumScale": {
      "Type": "String"
    },
    "webScale": {
      "Type": "String"
    }
  },
  "Resources": {
    "AppEnvironment": {
      "Properties": {
        "Environment": [
          {
            "Name": "ECS_TASK_DEFINITION",
            "Value": "custom"
          }
        ],
        "ServiceToken": "sns topic arn"
      },
      "Type": "Custom::ECSEnvironment"
    },
    "CNAME": {
      "Condition": "DNSCondition",
      "Properties": {
        "HostedZoneId": "Z3DG6IL3SJCGPX",
        "Name": "acme-inc.empire",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "webLoadBalancer",
              "DNSName"
            ]
          }
        ],
        "TTL": 60,
        "Type": "CNAME"
      },
      "Type": "AWS::Route53::RecordSet"
    },
    "RunTaskFunction": {
      "Properties": {
        "Code": {
          "ZipFile": "\nimport boto3\nimport logging\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\necs = boto3.client('ecs')\n\ndef handler(event, context):\n  logger.info('Request Received')\n  logger.info(event)\n\n  resp = ecs.run_task(\n    cluster=event['cluster'],\n    taskDefinition=event['taskDefinition'],\n    count=event['count'],\n    startedBy=event['startedBy'])\n\n  return map(lambda x: x['taskArn'], resp['tasks'])"
        },
        "Description": "Lambda function to run an ECS task",
        "Handler": "index.handler",
        "Role": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":role/",
              "ecsServiceRole"
            ]
          ]
        },
        "Runtime": "python2.7"
      },
      "Type": "AWS::Lambda::Function"
    },
    "vacuumEnvironment": {
      "Properties": {
        "Environment": [],
        "ServiceToken": "sns topic arn"
      },
      "Type": "Custom::ECSEnvironment"
    },
    "vacuumTD": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "./bin/vacuum"
            ],
            "Cpu": 256,
            "DockerLabels": {
              "empire.app.process": "vacuum"
            },
            "Environment": [
              {
                "Ref": "AppEnvironment"
              },
              {
                "Ref": "vacuumEnvironment"
              }
            ],
            "Essential": true,
            "Image": "remind101/acme-inc:latest",
            "Memory": 128,
            "Name": "vacuum",
            "Ulimits": [
              {
                "HardLimit": 256,
                "Name": "nproc",
                "SoftLimit": 256
              }
            ]
          }
        ],
        "Family": "acme-inc-vacuum",
        "ServiceToken": "sns topic arn",
        "Volumes": []
      },
      "Type": "Custom::ECSTaskDefinition"
    },
    "vacuumTrigger": {
      "Properties": {
        "Description": "Rule to periodically trigger the `vacuum` scheduled task",
        "RoleArn": {
          "Fn::Join": [
            "",
            [
              "arn:aws:iam::",
              {
                "Ref": "AWS::AccountId"
              },
              ":role/",
              "ecsServiceRole"
            ]
          ]
        },
        "ScheduleExpression": "cron(* * * * *)",
        "State": "ENABLED",
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "RunTaskFunction",
                "Arn"
              ]
            },
            "Id": "f",
            "Input": {
              "Fn::Join": [
                "",
                [
                  "{\"taskDefinition\":\"",
                  {
                    "Ref": "vacuumTD"
                  },
                  "\",\"count\":",
                  {
                    "Ref": "vacuumScale"
                  },
                  ",\"cluster\":\"",
                  "cluster",
                  "\",\"startedBy\": \"",
                  "1234",
                  "\"}"
                ]
              ]
            }
          }
        ]
      },
      "Type": "AWS::Events::Rule"
    },
    "vacuumTriggerPermission": {
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Fn::GetAtt": [
            "RunTaskFunction",
            "Arn"
          ]
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": {
          "Fn::GetAtt": [
            "vacuumTrigger",
            "Arn"
          ]
        }
      },
      "Type": "AWS::Lambda::Permission"
    },
    "web8080InstancePort": {
      "Properties": {
        "ServiceToken": "sns topic arn"
      },
      "Type": "Custom::InstancePort",
      "Version": "1.0"
    },
    "webEnvironment": {
      "Properties": {
        "Environment": [
          {
            "Name": "A",
            "Value": "foo"
          },
          {
            "Name": "B",
            "Value": "foo"
          },
          {
            "Name": "FOO",
            "Value": "bar"
          },
          {
            "Name": "PORT",
            "Value": "8080"
          }
        ],
        "ServiceToken": "sns topic arn"
      },
      "Type": "Custom::ECSEnvironment"
    },
    "webLoadBalancer": {
      "Properties": {
        "ConnectionDrainingPolicy": {
          "Enabled": true,
          "Timeout": 30
        },
        "CrossZone": true,
        "Listeners": [
          {
            "InstancePort": {
              "Fn::GetAtt": [
                "web8080InstancePort",
                "InstancePort"
              ]
            },
            "InstanceProtocol": "http",
            "LoadBalancerPort": 80,
            "Protocol": "http"
          }
        ],
        "Scheme": "internal",
        "SecurityGroups": [
          "sg-e7387381"
        ],
        "Subnets": [
          "subnet-bb01c4cd",
          "subnet-c85f4091"
        ],
        "Tags": [
          {
            "Key": "empire.app.process",
            "Value": "web"
          }
        ]
      },
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer"
    },
    "webService": {
      "Properties": {
        "Cluster": "cluster",
        "DesiredCount": {
          "Ref": "webScale"
        },
        "LoadBalancers": [
          {
            "ContainerName": "web",
            "ContainerPort": 8080,
            "LoadBalancerName": {
              "Ref": "webLoadBalancer"
            }
          }
        ],
        "Role": "ecsServiceRole",
        "ServiceName": "acme-inc-web",
        "ServiceToken": "sns topic arn",
        "TaskDefinition": {
          "Ref": "webTD"
        }
      },
      "Type": "Custom::ECSService"
    },
    "webTD": {
      "Properties": {
        "ContainerDefinitions": [
          {
            "Command": [
              "./bin/web"
            ],
            "Cpu": 256,
            "DockerLabels": {
              "cloudformation.restart-key": {
                "Ref": "RestartKey"
              },
              "empire.app.process": "web"
            },
            "Environment": [
              {
                "Ref": "AppEnvironment"
              },
              {
                "Ref": "webEnvironment"
              }
            ],
            "Essential": true,
            "Image": "remind101/acme-inc:latest",
            "Memory": 128,
            "Name": "web",
            "PortMappings": [
              {
                "ContainerPort": 8080,
                "HostPort": {
                  "Fn::GetAtt": [
                    "web8080InstancePort",
                    "InstancePort"
                  ]
                }
              }
            ],
            "Ulimits": [
              {
                "HardLimit": 256,
                "Name": "nproc",
                "SoftLimit": 256
              }
            ]
          }
        ],
        "Family": "acme-inc-web",
        "ServiceToken": "sns topic arn",
        "Volumes": []
      },
      "Type": "Custom::ECSTaskDefinition"
    }
  }
}